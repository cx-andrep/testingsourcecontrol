<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace='com.concretepage.user.UserMapper'>

  <select id='getUserById' parameterType='int' resultType='com.concretepage.user.User'>
     SELECT
      user_id as "userId",
      email_id as "emailId", 
      password as "password",
      first_name as "firstName", 
      last_name as "lastName"
     FROM users
     WHERE user_id = #{userId}
  </select>

  <!-- Instead of referencing Fully Qualified Class Names we can register Aliases in mybatis-config.xml and use Alias names. -->
   <resultMap type='User' id='UserResult'>
    <id property='userId' column='user_id'/>
    <result property='emailId' column='email_id'/>
    <result property='password' column='password'/>
    <result property='firstName' column='first_name'/>
    <result property='lastName' column='last_name'/>   
   </resultMap>

  <!-- Vulnerable Queries -->
  <select id='getUserByFirstname' parameterType="String" resultMap='UserResult'>
   SELECT * FROM users 
   WHERE first_name like '${_parameter}'
  </select>

  <select id='getAllUsers' resultMap='UserResult'>
   SELECT * FROM users
  </select>

  <insert id='insertUser' parameterType='User' useGeneratedKeys='true' keyProperty='userId'>
   INSERT INTO users(email_id, password, first_name, last_name)
    VALUES(#{emailId}, #{password}, #{firstName}, #{lastName})
  </insert>

  <update id='updateUser' parameterType='User'>
    UPDATE users 
    SET
     PASSWORD= #{password},
     FIRST_NAME = #{firstName},
     LAST_NAME = #{lastName}
    WHERE 
     USER_ID = #{userId}
  </update>

  <delete id='deleteUser' parameterType='int'>
    DELETE FROM users WHERE USER_ID = #{userId}
  </delete>

   
</mapper> 